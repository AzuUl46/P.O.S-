from tkinter import Tk, Frame, LabelFrame, Toplevel, StringVar, Label, Entry, ttk
from tkinter.ttk import Notebook, Style, Button, Combobox
import mysql.connector



class POS(Tk):
    def __init__(self):
        super().__init__()
        self.db = mysql.connector.connect(user = 'root', password = '123456789', host = 'localhost', database = 'punto_de_venta', port = '3306')

        print(self.db)

        self.cursor = self.db.cursor()
        self.geometry('500x500')
        self.title('General Point of Sale System')
        
        self.statu = ['1' , '2', '3']
        self.serv = [ 'Inventarios', 'Clientes','Productos','Reportes', 'Pagos' ]
        self.inventarios = ['Productos', 'Venta' ,'Compras']
        self.inventarios_2 = ['Proveedores', 'Orden de compra']
        self.ventas = [ 'Promociones', 'Devoluciones']
        self.clientes = ['Registro', 'Eliminar','Buscador']
        ########################################
        self.data = []
        self.valid_email = '[A-Za-z0-9.-]+@[A-Za-z0-9.-]+\.[A-Za-z]+'
        self.valid_name = '[A-Za-zá-úÁ-Ú]+ [A-Za-zá-úÁ-Ú ?]+[^ $]'

        global type_cont
        type_cont = 0
        sub_cont = 0
        sub_cont_2 = 0
        self.frm_pos = Frame(self, relief= 'sunken')
        self.frm_pos.pack(fill= 'both' ,expand=1)
        self.note_princ = Notebook(self.frm_pos)
        self.note_princ.pack(fill= 'both' ,expand=1)

        self.frm_1 = Frame(self.note_princ)
        self.frm_1.pack(fill= 'both' ,expand=1)
        self.note_sub = Notebook(self.frm_1)
        self.note_sub.pack(fill= 'both' ,expand=1)       
        self.inicialize() 
        

    def inicialize(self):
        self.frm_2 = Frame(self.note_sub)
        self.frm_2.pack(fill= 'both' ,expand=1)
        
        self.note_princ.add(self.frm_1, text='Venta')
        self.frm_prf = Frame(self.frm_2)
        self.frm_prf.pack(fill='x')
        self.frm_sale = Frame(self.frm_2)
        self.frm_sale.pack(fill='x') 
                
        self.lbl_1 = Label(self.frm_prf)
        self.lbl_2 = Label(self.frm_prf)
        self.lbl_1.config(text='Perfil de Usuario:')
        self.lbl_1.pack(side='left')
        self.cmbox = Combobox(self.frm_prf, values=self.statu, width=2, state='readonly')
        self.cmbox.bind('<<ComboboxSelected>>', lambda event: self.Status(self.cmbox))
        self.cmbox.pack(side='left')
        self.lbl_2.config(text=' Usuarios:       1.-Vendedor,     2.-Supervisor,      3.-Administrador. ')
        self.lbl_2.pack(side='right')
        self.Pestañas()
        

        
        

    def Pestañas(self):#'Inventarios', 'Clientes','Productos','Reportes', 'Pagos' 
        #Ventas
        #Orden de venta
        
        self.frm_sale_1 = Frame(self.frm_sale)
        self.frm_sale_1.pack(fill='x', expand=1)
        self.frm_products_sale = Frame(self.frm_sale)
        self.frm_products_sale.pack(fill='x', expand=1)
        self.frm_button_venta = Frame(self.frm_sale)
        self.frm_button_venta.pack(fill='x', expand=1)

        self.lbl_ticket = Label(self.frm_sale_1, text='Number Ticket: ')
        self.lbl_ticket.pack(side='left')
        self.frm_id = Frame(self.frm_products_sale)
        self.frm_id.pack(fill='both', expand=1)
        self.lblfrm_productos_venta = LabelFrame(self.frm_products_sale, text='Articulos')
        self.lblfrm_productos_venta.pack(side='left',fill='both', expand=1)
        self.lblfrm_productos_cant = LabelFrame(self.frm_products_sale, text='Cantidad')
        self.lblfrm_productos_cant.pack(side='left',fill='both', expand=1)
        self.lblfrm_productos_total = LabelFrame(self.frm_products_sale, text='Total')
        self.lblfrm_productos_total.pack(side='left',fill='both', expand=1)

        self.lbl_text_1 = Label(self.frm_id, text='Captura de codigo de articulo:')
        self.lbl_text_1.pack(side='left')
        self.entry_text_1 = Entry(self.frm_id, width=self.winfo_width() )
        self.entry_text_1.pack(fill='x', expand=1, padx=10)
        self.frm_art = Frame(self.lblfrm_productos_venta)
        self.frm_art.pack(fill='both', expand=1)
        self.frm_cant = Frame(self.lblfrm_productos_cant)
        self.frm_cant.pack(fill='both', expand=1)
        self.frm_tot = Frame(self.lblfrm_productos_total)
        self.frm_tot.pack(fill='both', expand=1)
        
        self.btn_eli = Button(self.frm_button_venta, text='Eliminar')
        self.btn_eli.pack(side='left')
        self.btn_devol = Button(self.frm_button_venta, text='Devolución')
        self.btn_devol.pack(side='left')
        self.btn_punto = Button(self.frm_button_venta, text='Puntos Clientes')
        self.btn_punto.pack(side='left')



                
 ###########################################
 #Inventarios
        self.frm_1_inv = Frame(self.note_princ)
        self.frm_1_inv.pack(fill= 'both' ,expand=1)
        self.note_princ.add(self.frm_1_inv, text=self.serv[0], state=['disabled'])
        
                
        self.note_sub_inv = Notebook(self.frm_1_inv)
        self.note_sub_inv.pack(fill= 'both' ,expand=1)    
        for sub_cont in range(3):
            self.frm_2_inv = Frame(self.note_sub_inv)
            self.frm_2_inv.pack(fill= 'both' ,expand=1)
            self.note_sub_inv.add(self.frm_2_inv, text=self.inventarios[sub_cont])
            sub_cont+=1 
            if sub_cont == 3:
                self.note_sub_inv_2 = Notebook(self.frm_2_inv)
                self.note_sub_inv_2.pack(fill= 'both' ,expand=1)
                for sub_cont_2 in range(2):
                    self.lblf_3 = Frame(self.note_sub_inv_2)
                    self.lblf_3.pack(fill= 'both' ,expand=1)
                    self.note_sub_inv_2.add(self.lblf_3, text=self.inventarios_2[sub_cont_2])
                    sub_cont_2+=1
                sub_cont+=1 

#PRoductos
        self.frm_1_produc = Frame(self.note_princ)
        self.frm_1_produc.pack(fill= 'both' ,expand=1)
        self.note_princ.add(self.frm_1_produc, text=self.serv[2], state=['disabled'])
        self.note_sub_produc = Notebook(self.frm_1_produc)
        self.note_sub_produc.pack(fill= 'both' ,expand=1) 

#Clientes
        self.frm_1_clientes = Frame(self.note_princ)
        self.frm_1_clientes.pack(fill= 'both' ,expand=1)
        self.note_princ.add(self.frm_1_clientes, text=self.serv[1],state=['disabled'])
        self.note_sub_clientes = Notebook(self.frm_1_clientes)
        self.note_sub_clientes.pack(fill= 'both' ,expand=1) 
        
        for sub_cont in range(3):
            if sub_cont == 0:
                self.frm_sub_registro = Frame(self.note_sub_clientes)
                self.frm_sub_registro.pack(fill= 'both' ,expand=1)
                self.note_sub_clientes.add(self.frm_sub_registro, text=self.clientes[sub_cont])
                def do_registry(self):
                    self.dic = {}
                    self.dic['name'] = self.fullname.get()
                    self.dic['email'] = self.email.get()
                    self.dic['birth'] = self.nacimiento.get()
                    self.dic['number'] = self.numero.get()
                    self.data.append(self.dic)
                    self.entry_name.delete(0, 'end')
                    self.entry_email.delete(0, 'end')
                    self.entry_nacimiento.delete(0, 'end')
                    self.entry_numero.delete(0, 'end')
                    self.entry_name.focus()

                def createWidgets(frm_labels, frm_entry, lbl_txt, strvar):
                        self.lbl = Label(frm_labels, text=lbl_txt, anchor='e')
                        self.lbl.pack(fill='x', expand=True, pady=5)
                        self.entry = Entry(frm_entry, textvariable=strvar)
                        self.entry.pack(pady=5)
                        return self.lbl, self.entry

                def set_focus(event, widget):
                        widget.focus()

                def verify_info(): 
                        self.new_window.deiconify() 
                        self.frm_show_data = Frame(self.new_window)
                        self.frm_show_data.pack() 
                        self.lbl_show_name = Label(self.frm_show_data, text=f'Nombre: {self.entry_name.get()}')
                        self.lbl_show_name.pack()
                        self.lbl_show_email = Label(
                        self.frm_show_data, text=f'Correo electrónico: {self.entry_email.get()}')
                        self.lbl_show_email.pack()
                        self.lbl_show_nacimiento = Label(
                        self.frm_show_data, text=f'nacimiento: {self.entry_nacimiento.get()}')
                        self.lbl_show_nacimiento.pack()
                        self.lbl_show_numero = Label(
                        self.frm_show_data, text=f'numero: {self.entry_numero.get()}')
                        self.lbl_show_numero.pack()
 
                        self.frm_show_buttons = Frame(self.new_window)
                        self.frm_show_buttons.pack()

                        self.btn_back = Button(self.frm_show_buttons, text='Regresar',
                         command=lambda: back(self.frm_show_data, self.frm_show_buttons))
                        self.btn_back.pack()
                        self.btn_save = Button(self.frm_show_buttons,
                            text='Guardar información', command=lambda: save_info(self.frm_show_data, self.frm_show_buttons))
                        self.btn_save.pack()

                def back( frm1, frm2):
                         #  '''Función para ocultar la ventana secundaria y mostrar la ventana principal'''
                        self.new_window.withdraw() 
                        #ventana.deiconify() 
                        self.entry_name.focus()
                        frm1.destroy() 
                        frm2.destroy()  
                      
                def save_info(self, frm1, frm2):
                        # '''Función para guardar los datos de usuario en la lista

                       # NOTA: Los datos se guardarán en forma de diccionario, bajo las siguientes llaves:
                       # name, email, course, teacher.'''
                        self.do_registry()
                        self.back(frm1, frm2)
                        self.myStyle = Style()
                        self.myStyle.configure('frm.TFrame', relief='ridge', borderwidth=5)
                        self.myStyle.configure('lbl_form.TLabel',
                            borderwidth=2, relief='groove')
                        self.myStyle.configure('entry_form.TEntry')
                        self.myStyle.configure('btns.TButton', foreground='#ffffff',
                        background='#14ff10', highlightbackground='#000000')

                    #def checkEntryLen():
   
                       # print('### Iniciando validación...')
                        #if re.fullmatch(self.valid_name, self.entry_name.get()):
                         #   print('>>>> Nombre validado!!')
                        #else:
                         #   print('Mejor suerte para la próxima, sigue participando )\'=')
                self.new_window = Toplevel()  
                self.new_window.geometry('250x150')
                self.new_window.withdraw() 

                self.frm_lbls_entrys = Frame(self.frm_sub_registro)
                self.frm_lbls_entrys.pack()
                self.frm_labels = Frame(self.frm_lbls_entrys)
                self.frm_labels.pack(side='left')
                self.frm_entrys = Frame(self.frm_lbls_entrys)
                self.frm_entrys.pack(side='left')

                self.fullname = StringVar()
                self.lbl_name, self.entry_name = createWidgets(self.frm_labels, self.frm_entrys, 'Nombre:', self.fullname)
 
                self.entry_name.bind('<Return>', lambda event: set_focus(event, self.entry_email))
                self.entry_name.bind('<Escape>', lambda event: self.entry_name.delete(0, 'end'))
                    #self.entry_name.bind('<KeyRelease>', checkEntryLen())
                self.entry_name.focus()
  
                self.email = StringVar()
                self.lbl_email, self.entry_email = createWidgets(self.frm_labels, self.frm_entrys, 'Correo electrónico:', self.email)
                self.entry_email.bind('<Return>', lambda event: set_focus(event, self.entry_nacimiento))
                self.entry_email.bind('<Escape>', lambda event: self.entry_email.delete(0, 'end'))
                    #self.entry_email.bind('<KeyRelease>', checkEntryLen())
 
                self.nacimiento = StringVar()
                self.lbl_nacimiento, self.entry_nacimiento = createWidgets(self.frm_labels, self.frm_entrys, 'Nacimiento:', self.nacimiento)
                self.entry_nacimiento.bind('<Return>', lambda event: set_focus(event, self.entry_nacimiento))
                self.entry_nacimiento.bind('<Escape>', lambda event: self.entry_nacimiento.delete(0, 'end'))
                    #self.entry_nacimiento.bind('<KeyRelease>', checkEntryLen())

                self.numero = StringVar()
                self.lbl_numero, self.entry_numero = createWidgets(self.frm_labels, self.frm_entrys, 'numero:', self.numero)
                self.entry_numero.bind('<Return>', lambda event: set_focus(self.event, self.btn_save))
                self.entry_numero.bind('<Escape>', lambda event: self.entry_numero.delete(0, 'end'))
                    #self.entry_numero.bind('<KeyRelease>', checkEntryLen())
 
                self.frm_buttons = Frame(self.frm_sub_registro)
                self.frm_buttons.pack()
 
                self.btn_save = Button(self.frm_buttons, text='Registrar', command=verify_info())
                    #self.btn_save['state'] = 'disabled' 
                self.btn_save.pack(side='left', pady=5, padx=10)
                self.new_window.protocol('WM_DELETE_WINDOW', back(self.frm_show_data, self.frm_show_buttons))
                sub_cont+=1

            elif sub_cont == 1:
                self.frm_sub_eliminar = Frame(self.note_sub_clientes)
                self.frm_sub_eliminar.pack(fill= 'both' ,expand=1)
                self.note_sub_clientes.add(self.frm_sub_eliminar, text=self.clientes[sub_cont])
                sub_cont+=1
            else:
                self.frm_sub_buscar = Frame(self.note_sub_clientes)
                self.frm_sub_buscar.pack(fill= 'both' ,expand=1)
                self.note_sub_clientes.add(self.frm_sub_buscar, text=self.clientes[sub_cont], state=['disabled'])
                sub_cont+=1


            

 ###########################
        #Reportes
        self.frm_1_rep = Frame(self.note_princ)
        self.frm_1_rep.pack(fill= 'both' ,expand=1)
        self.note_princ.add(self.frm_1_rep, text=self.serv[3],state=['disabled'])
        self.note_sub_rep = Notebook(self.frm_1_rep)
        self.note_sub_rep.pack(fill= 'both' ,expand=1) 

#############################


#################
#Estilo
#'winnative', 'clam', 'alt', 'default', 'classic', 'vista', 'xpnative'

        mystyle = Style()
        settings = settings = {"TNotebook.Tab": {"configure": {"padding": [5, 1],
                                            "background": "#ADD8E6"
                                           },
                              "map": {"background": [("selected", "#DAA520"), 
                                                     ("active", "#E9967A"),
                                                     ("disabled", "#A9A9A9")],
                                      "foreground": [("selected", "#ffffff"),
                                                     ("active", "#000000"),]

                                     }
                              }
           }  
        mystyle.theme_create('mi_estilo', parent='winnative', settings=settings)
        mystyle.theme_use('mi_estilo')

    def Status(self,val):
            self.note_princ.tab(self.frm_1_inv, state=['normal'])
            self.note_princ.tab(self.frm_1_produc, state=['normal'])


            self.note_sub_clientes.tab(self.frm_sub_buscar, state=['disabled'])
            self.note_princ.tab(self.frm_1_clientes, state=['disabled'])
            self.note_princ.tab(self.frm_1_rep, state=['disabled'])
            
            if val.get() == '1':
                pass   
            elif val.get() == '2' or val.get() == '3':
                self.note_princ.tab(self.frm_1_clientes, state=['normal'])
                self.note_princ.tab(self.frm_1_rep, state=['normal'])

                if val.get() == '3':
                    self.note_sub_clientes.tab(self.frm_sub_buscar, state=['normal'])




if __name__ == '__main__':
    app = POS()
    app.mainloop()
